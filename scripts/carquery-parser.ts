// lib/carquery-parser.ts
import type { Repository } from 'redis-om'

const baseUrl = 'https://www.carqueryapi.com/api/0.3/'

interface CarQueryResponse {
  Makes?: any[]
  Models?: any[]
  Trims?: any[]
  Years?: { min_year: string; max_year: string }
}

export class CarQueryParser {
  constructor(
    private trimRepository: Repository, 
    private filterRepository: Repository,
    private modelRepository: Repository
  ) {}
  
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms))
  }

  private async fetchData(params: Record<string, string>): Promise<CarQueryResponse> {
    const urlParams = new URLSearchParams(params)
    const response = await fetch(`${baseUrl}?${urlParams}`)
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    return await response.json()
  }

  private generateYearRange(minYear: string, maxYear: string): string[] {
    const years = []
    const min = parseInt(minYear)
    const max = parseInt(maxYear)
    
    for (let year = min; year <= max; year++) {
      years.push(year.toString())
    }
    
    return years
  }

  async parseAllData(): Promise<void> {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ CarQuery API...')
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤
      const yearsData = await this.fetchData({ cmd: 'getYears' })
      if (!yearsData.Years) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–¥–∞—Ö')
      }
      
      const { min_year, max_year } = yearsData.Years
      console.log(`üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: ${min_year} - ${max_year}`)
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–∏
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä–∫–∏...')
      const makesData = await this.fetchData({ cmd: 'getMakes' })
      console.log('üìä –û—Ç–≤–µ—Ç API –¥–ª—è –º–∞—Ä–æ–∫:', JSON.stringify(makesData, null, 2))
      
      if (!makesData.Makes) {
        console.log('‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –º–∞—Ä–∫–∏, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...')
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≥–æ–¥–∞
        const makesWithYear = await this.fetchData({ cmd: 'getMakes', year: '2020' })
        console.log('üìä –û—Ç–≤–µ—Ç API –¥–ª—è –º–∞—Ä–æ–∫ —Å –≥–æ–¥–æ–º:', JSON.stringify(makesWithYear, null, 2))
        
        if (!makesWithYear.Makes) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä–∫–∞—Ö –¥–∞–∂–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≥–æ–¥–∞')
        }
        
        makesData.Makes = makesWithYear.Makes
      }
      
      console.log(`üè≠ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫: ${makesData.Makes.length}`)
      
      let totalSaved = 0
      const processedTrims = new Set<string>()
      
      // –ü–∞—Ä—Å–∏–º –≤—Å–µ –º–∞—Ä–∫–∏
      const limitedMakes = makesData.Makes
      console.log(`üè≠ –ü–∞—Ä—Å–∏–º –≤—Å–µ ${limitedMakes.length} –º–∞—Ä–æ–∫`)
      
      // –ë–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–æ–∫ (–ø–æ 1 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
      const batchSize = 1
      for (let i = 0; i < limitedMakes.length; i += batchSize) {
        const batch = limitedMakes.slice(i, i + batchSize)
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫—É: ${batch[0].make_display}`)
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω—É –º–∞—Ä–∫—É
        const result = await this.processMake(batch[0], processedTrims)
        totalSaved += result
        
        console.log(`  üíæ –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${totalSaved}`)
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–∞—Ä–∫–∞–º–∏
        if (i + batchSize < limitedMakes.length) {
          console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –º–∞—Ä–∫–æ–π...')
          await this.delay(2000) // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –º–∞—Ä–∫–∞–º–∏
        }
      }
      
      console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π: ${totalSaved}`)
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      await this.generateFilters()
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error)
      throw error
    }
  }

  private async processMake(make: any, processedTrims: Set<string>): Promise<number> {
    console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫—É: ${make.make_display}`)
    let saved = 0
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –º–∞—Ä–∫–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏)
      const trimsData = await this.fetchData({
        cmd: 'getTrims',
        make: make.make_id,
        full_results: '1'
      })
      
      if (trimsData.Trims && trimsData.Trims.length > 0) {
        console.log(`  üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –¥–ª—è –º–∞—Ä–∫–∏: ${trimsData.Trims.length}`)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é
        for (const trim of trimsData.Trims) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ model_id
          if (processedTrims.has(trim.model_id)) continue
          
          const trimData = {
            model_id: trim.model_id || '',
            model_make_id: trim.model_make_id || '',
            model_name: trim.model_name || '',
            model_trim: trim.model_trim || '',
            model_year: trim.model_year || '',
            model_body: trim.model_body || '',
            model_engine_position: trim.model_engine_position || '',
            model_engine_cc: trim.model_engine_cc || '',
            model_engine_cyl: trim.model_engine_cyl || '',
            model_engine_type: trim.model_engine_type || '',
            model_engine_power_ps: trim.model_engine_power_ps || '',
            model_engine_power_hp: trim.model_engine_power_hp || '',
            model_top_speed_kph: trim.model_top_speed_kph || '',
            model_drive: trim.model_drive || '',
            model_transmission_type: trim.model_transmission_type || '',
            model_seats: trim.model_seats || '',
            model_doors: trim.model_doors || '',
            model_weight_kg: trim.model_weight_kg || '',
            model_length_mm: trim.model_length_mm || '',
            model_width_mm: trim.model_width_mm || '',
            model_height_mm: trim.model_height_mm || '',
            model_wheelbase_mm: trim.model_wheelbase_mm || '',
            model_lkm_hwy: trim.model_lkm_hwy || '',
            model_lkm_city: trim.model_lkm_city || '',
            model_fuel_cap_l: trim.model_fuel_cap_l || '',
            model_sold_in_us: trim.model_sold_in_us || '',
            make_display: trim.make_display || '',
            make_country: trim.make_country || ''
          }
          
          await this.trimRepository.save(trimData)
          saved++
          processedTrims.add(trim.model_id)
        }
      } else {
        console.log(`  ‚ö†Ô∏è –ù–µ—Ç –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π –¥–ª—è ${make.make_display}`)
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ä–∫–∏ ${make.make_display}:`, error)
    }
    
    return saved
  }

  async generateFilters(): Promise<void> {
    console.log('üîç –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...')
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    await this.trimRepository.createIndex()
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const allTrims = await this.trimRepository.search().return.all()
    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${allTrims.length} –∑–∞–ø–∏—Å–µ–π...`)
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏
    const makes = new Set<string>()
    const models = new Set<string>()
    const modelMakeMap = new Map<string, string>() // –º–æ–¥–µ–ª—å -> –º–∞—Ä–∫–∞

    allTrims.forEach((trim: any) => {
      // –°–æ–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–∏
      if (trim.model_make_id && trim.model_make_id !== null && trim.model_make_id.trim() !== '') {
        makes.add(trim.model_make_id.trim())
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –º–∞—Ä–∫–µ
      if (trim.model_name && trim.model_name !== null && trim.model_name.trim() !== '') {
        const makeName = trim.make_display || trim.model_make_id || 'Unknown'
        const modelName = trim.model_name.trim()
        models.add(modelName)
        modelMakeMap.set(modelName, makeName)
      }
    })

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
    await this.filterRepository.createIndex()
    await this.modelRepository.createIndex()

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –º–∞—Ä–æ–∫
    const makeFilters = [
      { type: 'make', values: Array.from(makes).sort() }
    ]

    for (const filter of makeFilters) {
      await this.filterRepository.save(filter)
      console.log(`  ‚úÖ ${filter.type}: ${filter.values.length} –∑–Ω–∞—á–µ–Ω–∏–π`)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ö–µ–º—É
    const modelsToSave = Array.from(models).map(model => ({
      name: model,
      make: modelMakeMap.get(model) || 'Unknown'
    }))

    for (const model of modelsToSave) {
      await this.modelRepository.save(model)
    }
    console.log(`  ‚úÖ models: ${modelsToSave.length} –º–æ–¥–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`)

    console.log('‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
  }

  async clearAllData(): Promise<void> {
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...')
    
    await this.trimRepository.dropIndex()
    await this.filterRepository.dropIndex()
    await this.modelRepository.dropIndex()
    
    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')
  }
}